apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: template.yaml
  title: undefined
  description: Saved Ansible Execution Environment Definition template
  annotations:
    ansible.io/template-type: execution-environment
    ansible.io/saved-template: 'true'
    ansible.io/original-preset: undefined
  tags:
    - ansible
    - execution-environment
    - saved-template
    - reusable
spec:
  owner: group:ansible-team
  type: tool

  parameters:
    # Step 1: Presets Selection (with saved preset as default)
    - title: Choose a Starting Point
      description: Select a preset or start from scratch (defaults to saved configuration)
      properties:
        preset:
          title: Preset Configuration
          type: string
          description: Choose a preset configuration or start custom
          default: 'undefined'
          enum:
            - 'basic-automation'
            - 'network-automation'
            - 'cloud-management'
            - 'container-orchestration'
            - 'security-compliance'
            - 'custom'
          enumNames:
            - 'Basic Automation - Essential collections for system management'
            - 'Network Automation - Network device management'
            - 'Cloud Management - AWS, Azure, GCP automation'
            - 'Container Orchestration - Kubernetes and container management'
            - 'Security & Compliance - Security scanning and compliance'
            - 'Custom Configuration - Start from scratch'

    # Step 2: Base Image Selection (with saved base image as default)
    - title: Base Image Selection
      description: Choose the base container image for your execution environment
      properties:
        baseImage:
          title: Base Image
          type: string
          description: Base container image for your execution environment
          default: 'registry.access.redhat.com/ubi9/python-311:latest'
          enum:
            - 'registry.access.redhat.com/ubi9/python-311:latest'
            - 'registry.access.redhat.com/ubi8/python-39:latest'
            - 'quay.io/ansible/ansible-runner:latest'
            - 'quay.io/ansible/ansible-runner:devel'
            - 'custom'
          enumNames:
            - 'Red Hat UBI 9 Python 3.11 (Recommended)'
            - 'Red Hat UBI 8 Python 3.9'
            - 'Ansible Runner Latest'
            - 'Ansible Runner Development'
            - 'Custom Base Image'
        customBaseImage:
          title: Custom Base Image
          type: string
          description: Specify custom base image URL
          default: ''

    # Step 3: Collections Configuration (with saved collections as defaults)
    - title: Collections Configuration
      description: Configure Ansible Galaxy collections
      properties:
        collections:
          title: Ansible Collections
          type: array
          description: Ansible Galaxy collections to include in your execution environment
          default: []
          items:
            type: object
            properties:
              name:
                type: string
                title: Collection Name
                description: Full collection name (e.g., community.general)
              version:
                type: string
                title: Version (Optional)
                description: Specific version to install (leave empty for latest)
            required: ['name']
          ui:options:
            addable: true
            orderable: true
            removable: true

    # Step 4: Python Requirements (with saved requirements as defaults)
    - title: Python Requirements
      description: Configure Python package dependencies
      properties:
        requirements:
          title: Python Requirements
          type: array
          description: Python packages to install in your execution environment
          default: []
          items:
            type: string
            title: Package
            description: Python package with optional version (e.g., requests>=2.28.0)
          ui:options:
            addable: true
            orderable: true
            removable: true
        requirementsBulk:
          title: Bulk Import Requirements
          type: string
          description: Paste requirements.txt content (one package per line)
          default: ''
          ui:widget: textarea
          ui:options:
            rows: 5
          ui:placeholder: |
            requests>=2.28.0
            PyYAML>=6.0
            jinja2>=3.1.0

    # Step 5: System Packages (with saved packages as defaults)
    - title: System Packages
      description: Configure system-level package dependencies
      properties:
        packages:
          title: System Packages
          type: array
          description: System packages (RPM/APT) to install in your execution environment
          default: []
          items:
            type: string
            title: Package
            description: System package name (e.g., wget, curl, git)
          ui:options:
            addable: true
            orderable: true
            removable: true

    # Step 6: Additional Build Steps (with saved build steps as defaults)
    - title: Additional Build Steps
      description: Add custom build steps for advanced configuration
      properties:
        additionalBuildSteps:
          title: Custom Build Steps
          type: array
          description: Define custom build steps that execute at specific points during the build
          default: []
          items:
            type: object
            properties:
              id:
                title: Step ID
                type: string
                description: Unique identifier for this build step
                ui:placeholder: 'e.g., install-custom-tools'
              stepType:
                title: Step Type
                type: string
                description: When this build step should execute
                enum:
                  - 'prepend_base'
                  - 'append_base'
                  - 'prepend_galaxy'
                  - 'append_galaxy'
                  - 'prepend_builder'
                  - 'append_builder'
                  - 'prepend_final'
                  - 'append_final'
                enumNames:
                  - 'Prepend Base - Before base image dependencies'
                  - 'Append Base - After base image dependencies'
                  - 'Prepend Galaxy - Before Ansible collections'
                  - 'Append Galaxy - After Ansible collections'
                  - 'Prepend Builder - Before ansible-builder steps'
                  - 'Append Builder - After ansible-builder steps'
                  - 'Prepend Final - Before final image creation'
                  - 'Append Final - After final image creation'
              commands:
                title: Commands
                type: array
                description: List of commands to execute
                items:
                  type: string
                  title: Command
                  ui:placeholder: 'e.g., RUN apt-get update'
                ui:options:
                  addable: true
                  orderable: true
                  removable: true
            required: ['id', 'stepType', 'commands']
          ui:options:
            addable: true
            orderable: true
            removable: true

    # Step 7: Build Configuration (with saved build settings as defaults)
    - title: Build Configuration
      description: Configure build settings and output options
      properties:
        buildTag:
          title: Image Tag
          type: string
          description: Tag for the built execution environment image
          default: 'my-execution-environment:latest'
          ui:placeholder: 'e.g., quay.io/myorg/my-ee:v1.0'
        buildArgs:
          title: Additional Build Arguments
          type: array
          description: Additional arguments to pass to ansible-builder
          default: []
          items:
            type: string
            title: Argument
            ui:placeholder: 'e.g., --verbosity 2'
          ui:options:
            addable: true
            orderable: true
            removable: true

    # Step 8: Template Options (allow further customization)
    - title: Template Options
      description: Configure template saving and sharing options
      properties:
        saveAsTemplate:
          title: Save as Template
          type: boolean
          description: Save this configuration as a reusable template
          default: false
          ui:help: "Creates a software template that others can use with your settings as defaults"
        
        templateName:
          title: Template Name
          type: string
          description: Name for the saved template
          ui:help: "Will appear in the 'Create Component' list"
        
        templateDescription:
          title: Template Description
          type: string
          description: Description for the saved template
          ui:help: "Helps others understand when to use this template"
        
      dependencies:
        saveAsTemplate:
          oneOf:
            - properties:
                saveAsTemplate:
                  const: true
                templateName:
                  title: Template Name
                  type: string
                  ui:help: "Required for saving template"
                templateDescription:
                  title: Template Description
                  type: string
                  ui:help: "Optional but recommended"
              required: ['templateName']
            - properties:
                saveAsTemplate:
                  const: false

    # Step 9: Repository Configuration
    - title: Repository Configuration
      description: Optionally create a GitHub repository for your Execution Environment Definition
      properties:
        createRepository:
          title: Create GitHub Repository
          type: boolean
          description: Create a GitHub repository with documentation
          default: false
          ui:help: "If unchecked, you'll get the EE files to download and use locally"
      dependencies:
        createRepository:
          oneOf:
            - properties:
                createRepository:
                  const: true
                repoUrl:
                  title: Repository Location
                  type: string
                  ui:field: RepoUrlPicker
                  ui:options:
                    allowedHosts:
                      - github.com
                      - gitlab.com
                description:
                  title: Repository Description
                  type: string
                  description: Description for the repository
                  default: 'Ansible Execution Environment Definition files'
                visibility:
                  title: Repository Visibility
                  type: string
                  description: Visibility of the created repository
                  default: public
                  enum:
                    - public
                    - private
                  enumNames:
                    - 'Public'
                    - 'Private'
              required: ['repoUrl']
            - properties:
                createRepository:
                  const: false

  steps:
    # Step 1: Process preset selection and merge configurations
    - id: process-preset
      name: Process Preset Configuration
      action: debug:log
      input:
        message: 'Using saved template: undefined with preset: ${{ parameters.preset }}'

    # Step 2: Prepare collections data
    - id: prepare-collections
      name: Prepare Collections Data
      action: debug:log
      input:
        message: 'Preparing collections data'

    # Step 3: Create EE definition files
    - id: create-ee-definition
      name: Create Execution Environment Definition
      action: ansible:ee:create-definition
      input:
        values:
          baseImage: ${{ parameters.baseImage === 'custom' and parameters.customBaseImage or parameters.baseImage }}
          collections: ${{ parameters.collections or [] }}
          popularCollections: []
          requirements: ${{ parameters.requirements or [] }}
          requirementsFile: ${{ parameters.requirementsFile or '' }}
          requirementsBulk: ${{ parameters.requirementsBulk or '' }}
          packages: ${{ parameters.packages or [] }}
          popularPackages: []
          additionalBuildSteps: ${{ parameters.additionalBuildSteps or [] }}
          buildTag: ${{ parameters.buildTag }}
          buildArgs: ${{ parameters.buildArgs }}
          repoUrl: ${{ parameters.repoUrl }}
          description: ${{ parameters.description }}

    # Step 4: Save as template (conditional)
    - id: save-template
      name: Save as Reusable Template
      if: ${{ parameters.saveAsTemplate }}
      action: ansible:ee:save-template
      input:
        values:
          templateName: ${{ parameters.templateName }}
          templateDescription: ${{ parameters.templateDescription }}
          preset: ${{ parameters.preset }}
          baseImage: ${{ parameters.baseImage }}
          customBaseImage: ${{ parameters.customBaseImage }}
          collections: ${{ parameters.collections or [] }}
          popularCollections: []
          requirements: ${{ parameters.requirements or [] }}
          requirementsFile: ${{ parameters.requirementsFile or '' }}
          requirementsBulk: ${{ parameters.requirementsBulk or '' }}
          packages: ${{ parameters.packages or [] }}
          popularPackages: []
          additionalBuildSteps: ${{ parameters.additionalBuildSteps or [] }}
          buildTag: ${{ parameters.buildTag }}
          buildArgs: ${{ parameters.buildArgs or [] }}

    # Step 5: Publish to GitHub Repository (conditional)
    - id: publish-repository
      name: Publish to GitHub Repository
      if: ${{ parameters.createRepository }}
      action: publish:github
      input:
        allowedHosts: 
          - github.com
          - gitlab.com
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: 'main'
        repoVisibility: ${{ parameters.visibility }}

  output:
    links:
      - title: 🔗 GitHub Repository
        url: ${{ steps['publish-repository'].output.remoteUrl }}
        icon: github
        if: ${{ parameters.createRepository }}
    text:
      - title: 🎉 Execution Environment Definition Created Successfully!
        content: |
          Your Ansible Execution Environment Definition has been generated using the saved template "undefined".
          
          **Base Image:** `registry.access.redhat.com/ubi9/python-311:latest`
          **Build Tag:** `${{ parameters.buildTag }}`
          **Collections:** 0 configured
          **Requirements:** 0 configured
          **Packages:** 0 configured
      
      - title: 📋 execution-environment.yml
        content: |
          **Complete EE definition with inline dependencies:**
          ```yaml
          ${{ steps['create-ee-definition'].output.eeDefinitionContent }}
          ```
          
          **✨ This file uses inline dependencies** as recommended by the Ansible Builder documentation.
      
      - title: 🚀 Build Your Execution Environment
        content: |
          **1. Save the execution-environment.yml file**
          **2. Install ansible-builder:** `pip install ansible-builder`
          **3. Build:** `${{ steps['create-ee-definition'].output.buildCommand }}`
          **4. Use:** `ansible-navigator run playbook.yml --execution-environment-image ${{ parameters.buildTag }}`
      
      - title: 📁 GitHub Repository
        if: ${{ parameters.createRepository }}
        content: |
          **🎉 Your GitHub repository has been created successfully!**
          
          **Repository:** ${{ steps['publish-repository'].output.remoteUrl }}
          
          **What's included:**
          - `execution-environment.yml` - EE definition with inline dependencies
          - `README.md` - Complete documentation and usage instructions
          
          **Next steps:**
          1. **Clone the repository:**
             ```bash
             git clone ${{ steps['publish-repository'].output.remoteUrl }}
             cd ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
             ```
          
          2. **Build your EE:**
             ```bash
             ${{ steps['create-ee-definition'].output.buildCommand }}
             ```
          
          3. **For production CI/CD:** Use the "Ansible EE Build & Publish" template to create a repository with automated building and registry publishing